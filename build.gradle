plugins {
	id 'fabric-loom' version "${loom_version}"
	id 'maven-publish'
}
loom {
	accessWidener = file("src/main/resources/davespotioneering.aw")
}
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = "fabric-" +project.minecraft_version +"-"+ project.mod_version
group = project.maven_group


repositories {
	maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com/releases" }
}

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"


	// auto-generate mappings to stop mojmap conflicts with geckolib
	/*mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:${project.parchment_mappings}@zip")
		// don't convert this to a dynamic instantiation, otherwise java won't see the overridden hashCode
		addLayer(new MappingsSpec<MappingLayer>() {
			final Map<String, String> METHOD_NAME_MAP = Map.of(
					"getTextureLocation", "_getTextureLocation"
			)

			@Override
			MappingLayer createLayer(MappingContext mappingContext) {
				return new MappingLayer() {
					@Override
					void visit(MappingVisitor mappingVisitor) throws IOException {
						MemoryMappingTree memoryMappingTree = mappingVisitor as MemoryMappingTree
						memoryMappingTree.getClasses().forEach(classEntry -> {
							classEntry.methods.forEach(methodEntry -> {
								String newMethodName = METHOD_NAME_MAP.get(methodEntry.getName(MappingsNamespace.NAMED.toString()))
								if (newMethodName != null) {
									//noinspection GroovyAccessibility
									methodEntry.srcName = newMethodName
								}
							})
						})
					}

					@Override
					MappingsNamespace getSourceNamespace() {
						return MappingsNamespace.NAMED
					}

					@Override
					List<Class<? extends MappingLayer>> dependsOn() {
						return List.of(IntermediaryMappingLayer.class)
					}
				}
			}

			@Override
			int hashCode() {
				// used to make sure caches stay consistent
				return METHOD_NAME_MAP.hashCode()
			}
		})
	}*/

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	compileOnly "com.google.code.findbugs:jsr305:+"
	modImplementation 'software.bernie.geckolib:geckolib-fabric-1.16.5:3.0.40:dev'

	// PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
	// You may need to force-disable transitiveness on them.

	modApi("me.shedaniel.cloth.api:cloth-client-events-v0:${cloth_client_events_v0_version}") {
		transitive(false)
	}
	include("me.shedaniel.cloth.api:cloth-client-events-v0:${cloth_client_events_v0_version}") {
		transitive(false)
	}
	modApi("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
		exclude(module: "fabric-api")
	}
	modApi("org.jetbrains:annotations:19.0.0")
	modCompileOnly("com.terraformersmc:modmenu:${modmenu_version}") {
		transitive(false)
	}
	modRuntime("com.terraformersmc:modmenu:${modmenu_version}") {
		transitive(false)
	}
}

sourceSets {
	main.resources.srcDirs += 'src/generated/resources'
}

allprojects {
	gradle.projectsEvaluated {
		tasks.withType(JavaCompile) {
			options.compilerArgs << "-Xmaxerrs" << "100000"
		}
	}
}
processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
	options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
	classifier = "sources"
	from sourceSets.main.allSource
}

jar {
	from "LICENSE"
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			// add all the jars that should be included when publishing to maven
			artifact(remapJar) {
				builtBy remapJar
			}
			artifact(sourcesJar) {
				builtBy remapSourcesJar
			}
		}
	}

	// select the repositories you want to publish to
	repositories {
		// uncomment to publish to the local maven
		// mavenLocal()
	}
}
